<%= provide(:title, 'C++ | Control Structures') %>


<div class="wrapper2">

<nav class="nav">
<%= render 'header' %>
</nav>

<main class='main'>


<h1><span class="preproc">if</span> Statement</h1>
<div class="code">
<pre>
  <span class="preproc">if</span> (expression)
  {
    statements;
  }
</pre>
</div>
<div class="code">
<pre>
  <span class="preproc">if</span> (expression)
  {
    statements;
  }
  <span class="preproc">else if</span> (expression)
  {
    statements;
  }
  <span class="preproc">else</span>
  {
    statements;
  }
</pre>
</div>
<br><br>

<h1>Conditional Operators</h1>
<p>
  This is an if-else statement but with the conditional operators,<code> ? : </code>, taking the place of the words <span class="preproc">if</span> and <span class="preproc">else</span>
</p>
<div class="code">
<pre>
  expression1 ? expression2 : expression3;
</pre>
</div>
<p>
  If expression1 is true, evaluate expression2, else evaluate expression3;
</p>
<br><br>

<h1>Switch Statements</h1>
<div class="code">
<pre>
  <span class="preproc">switch</span> (expression)
  {
    <span class="preproc">case</span> value1:
      statements1;
      <span class="preproc">break</span>;
    <span class="preproc">case</span> value2:
      statements2;
      <span class="preproc">break</span>;
    <span class="preproc">case</span> valueN:
      statementsN;
      <span class="preproc">break</span>;
    <span class="preproc">default</span> :
      statements;
  }
</pre>
</div>
<br><br>

<h1><span class="preproc">while</span> Statement</h1>
<div class="code">
<pre>
  <span class="preproc">while</span> (expression)
  {
    statements;
  }
</pre>
</div>
<br>

<h2>Counter-Controlled <span class="preproc">while</span> loop</h2>
<p>
  What you need to know: The number of times the statement(s) need to be executed
</p>
<div class="code">
<pre>
  <span class="preproc">int</span> counter = <span class="num">0</span>;
  <span class="preproc">while</span> (counter &#060= 10)
  {
    std::cout &#060&#060 counter &#060&#060 std::endl;
  }
</pre>
</div>
<br>

<h2>Flag-Controlled <span class="preproc">while</span> loop</h2>
<p>
  Uses a boolean value to control the loop
</p>
<div class="code">
<pre>
  found = <span class="preproc">false</span>;
  <span class="preproc">while</span> (!found) <span class="comment">while found is not true</span>
  {
    std::cout &#060&#060 <span class="str">"Enter a number: "</span> &#060&#060 std::endl;
    cin &#062&#062 guess;
    if (guess == num)
    {
      found = <span class="preproc">true</span>;
      std::cout &#060&#060 <span class="str">"You guessed the number!"</span> &#060&#060 std::endl;
    }

  }
</pre>
</div>
<br>

<h2>Sentinel-Controlled <span class="preproc">while</span> loop</h2>
<p>
  What you need to know: The value of the last data point (sentinel)
</p>
<div class="code">
<pre>
  std::cin &#062&#062 number;
  <span class="preproc">while</span> (number != SENTINEL)
  {
    sum = sum + number;
  }
</pre>
</div>
<br>

<h2>End-Of-File-Controlled <span class="preproc">while</span> loop</h2>
<div class="code">
<pre>
  <span class="preproc">while</span> (cin)
  {
    std::cin &#062&#062 number;
    std::cout &#060&#060 number &#060&#060 std::endl;
  }
</pre>
</div>
<div class="code">
<pre>
  <span class="preproc">while</span> (!inFile.<span class="func">eof</span>())
  {
    inFIle &#062&#062 number;
    std::cout &#060&#060 number &#060&#060 std::endl;
  }
</pre>
</div>
<br><br>

<h1><span class="preproc">for</span> loops</h1>

<div class="code">
<pre>
  <span class="preproc">for</span>(<span class="preproc">int</span> i = 0; i &#060= 10; i++)
  {
    std::cout &#060&#060 i &#060&#060 std::endl;
  }
</pre>
</div>
<div class="code">
<pre>
  <span class="preproc">for</span>(<span class="preproc">int</span> i = 0; i &#060= 2; i++)
  {
    <span class="preproc">for</span>(<span class="preproc">int</span> j = 0; j &#060= 10; j++)
    {
      std::cout &#060&#060 i * j &#060&#060 std::endl;
    }
  }
</pre>
</div>
<br><br>

<h1><span class="preproc">do while</span> loops</h1>

<div class="code">
<pre>
  <span class="preproc">do</span>
  {
    std::cout &#060&#060 i &#060&#060 std::endl;
    i = i + 1;
  }
  <span class="preproc">while</span>(i &#060 5);
</pre>
</div>
</main>
</div>
