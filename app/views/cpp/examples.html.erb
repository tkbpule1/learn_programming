<%= provide(:title, 'C++ | Examples') %>

<%= render 'header' %>



<h1>Basics</h1>

<h2>Convert Length</h2>
<p>
  Write a program that takes as input given lengths expressed in feet and
  inches.  The program should then convert and output the lengths in
  centimeters.  Assume that the given lengths in feet and inches are integers.
</p>

<div class="code">
<pre>
  <span class="comment">//Header File</span>
  <span class="preproc">#include</span> <span class="str">&#060iostream></span>

  <span class="comment">//Named Constants</span>
  <span class="preproc">const double</span> CENTIMETERS_PER_INCH = 2.54;
  <span class="preproc">const int</span> INCHES_PER_FOOT = 12;

  <span class="comment">//Main Function</span>
  <span class="preproc">int</span> <span class="func">main</span>()
  {
    <span class="comment">//Declare Variables</span>
    <span class="preproc">int</span> feet, inches;
    <span class="preproc">int</span> totalInches;
    <span class="preproc">double</span> centimeters;

    <span class="comment">//Statement to prompt the user for input</span>
    std::cout << <span class="str">"Enter two integers, one for feet and one for inches: "</span>;

    <span class="comment">//Statement to read the input from the user</span>
    std::cin >> feet >> inches;

    <span class="comment">//Statement to output the input from the user</span>
    std::cout << <span class="str">"You entered:"</span> << feet << <span class="str">" Feet and "</span>
              << inches << <span class="str">" Inches."</span> << std::endl;

    <span class="comment">//Calculate total number of inches</span>
    totalInches = INCHES_PER_FOOT * feet + inches;

    <span class="comment">//Output the total number of inches</span>
    std::cout << <span class="str">"The total number of inches = "</span>
              << totalInches << std::endl;

    <span class="comment">//Convert inches into centimeters</span>
    centimeters = CENTIMETERS_PER_INCH * totalInches;

    <span class="comment">//Output the number of centimeters</span>
    std::cout << <span class="str">"The number of centimeters = "</span>
              << centimeters << std::endl;

    <span class="preproc">return</span> <span class="num">0</span>;
  }
</pre>
</div>

<h2>Make Change</h2>
<p>
  Write a program that takes as input any change expressed in cents.  It should then compute the number of half-dollars, quarters, dimes, nickels, and pennies to be returned, returning as many half-dollars as possible, then as many quarters as possible, and so on.
</p>
<div class="code">
<pre>
  <span class="comment">//Header File</span>
  <span class="preproc">#include</span> <span class="str">&#060iostream></span>

  <span class="comment">//Named Constants</span>
  <span class="preproc">const int</span> HALF_DOLLAR= 50;
  <span class="preproc">const int</span> QUARTER = 25;
  <span class="preproc">const int</span> DIME = 10;
  <span class="preproc">const int</span> NICKEL = 5;

  <span class="comment">//Main Function</span>
  <span class="preproc">int</span> <span class="func">main</span>()
  {
    <span class="comment">//Declare Variables</span>
    <span class="preproc">int</span> change;
    <span class="preproc">int</span> half_dollars;
    <span class="preproc">int</span> quarters;
    <span class="preproc">int</span> dimes;
    <span class="preproc">int</span> nickels;
    <span class="preproc">int</span> pennies;

    <span class="comment">//Statement to prompt the user to input amount of change in cents</span>
    std::cout << <span class="str">"Enter change in cents: "</span>;

    <span class="comment">//Statement to store input into variable, change</span>
    std::cin >> change;

    <span class="comment">//Statement to calculate number of half dollars</span>
    half_dollars = change / HALF_DOLLAR;

    <span class="comment">//Statement to update change</span>
    change = change % HALF_DOLLAR;

    <span class="comment">//Statement to calculate number of quarters</span>
    quarters = change / QUARTER;

    <span class="comment">//Statement to update change</span>
    change = change % QUARTER;

    <span class="comment">//Statement to calculate number of dimes</span>
    dimes = change / DIME;

    <span class="comment">//Statement to update change</span>
    change = change % DIME;

    <span class="comment">//Statement to calculate number of nickels</span>
    nickels = change / NICKEL;

    <span class="comment">//Statement to update change</span>
    change = change % NICKEL;

    <span class="comment">//The number of pennies is now equal to the change</span>
    pennies = change;

    <span class="comment">//Output the results of our calculations</span>
    std::cout << <span class="str">"The number of half dollars: "</span>
              << half_dollars << std::endl;
    std::cout << <span class="str">"The number of quarters: "</span>
              << quarters << std::endl;
    std::cout << <span class="str">"The number of dimes: "</span>
              << dimes << std::endl;
    std::cout << <span class="str">"The number of nickels: "</span>
              << nickels << std::endl;
    std::cout << <span class="str">"The number of pennies: "</span>
              << pennies << std::endl;

    <span class="preproc">return</span> <span class="num">0</span>;
  }
</pre>
</div>

<h1>File Input/Output</h1>
<p>
  Write a program that reads a student name followed by five test scores.  The program should output the student name, the five test scores, and the average score.  Output the average score with two decimal places.<br>
  The data is stored in a file called test.txt and the output should be stored in a file called testavg.txt.
</p>
<h3>
  test.txt
</h3>
<p>
  Andrew Miller 87.50 89 65.75 37 98.50
</p>
<div class="code">
<pre>
  <span class="comment">//Header File</span>
  <span class="preproc">#include</span> <span class="str">&#060iostream></span>
  <span class="preproc">#include</span> <span class="str">&#060fstream></span>
  <span class="preproc">#include</span> <span class="str">&#060iomanip></span>
  <span class="preproc">#include</span> <span class="str">&#060string></span>

  <span class="comment">//Main Function</span>
  <span class="preproc">int</span> <span class="func">main</span>()
  {
    <span class="comment">//Declare Variables</span>
    ifstream inFile;
    ofstream outFile;
    <span class="preproc">double</span> test1, test2, test3, test4, test5;
    <span class="preproc">double</span> average;
    string firstName;
    string lastName;

    inFile.open(<span class="str">"/home/ubuntu/Desktop/test.txt"</span>);
    outFile.open(<span class="str">"/home/ubuntu/Desktop/testavg.txt"</span>);

    outFile << fixed << showpoint;
    outFile << setprecision</span>(2</span>);

    std::cout << <span class="str">"Processing Data"</span> << std::endl;

    inFile >> firstName >> lastName;
    outFile << <span class="str">"Student name: "</span> << firstName << " "</span> << lastName << std::endl;

    inFile >> test1 >> test2 >> test3 >> test4 >> test5;
    outFile << "Test scores: "
            << <span class="func">setw</span>(<span class="num">6</span>) << test1
            << <span class="func">setw</span>(<span class="num">6</span>) << test2
            << <span class="func">setw</span>(<span class="num">6</span>) << test3
            << <span class="func">setw</span>(<span class="num">6</span>) << test4
            << <span class="func">setw</span>(<span class="num">6</span>) << test5
            << std::endl;

    average = (test1 + test2 + test3 + test4 + test5) / 5.0;

    outFile << <span class="str">"Average test score: "</span> << <span class="func">setw</span>(<span class="num">6</span>) << average << std::endl;

    inFile.close();
    outFile.close();

    <span class="preproc">return</span> <span class="num">0</span>;
  }
</pre>
</div>

<h1> C++ Control Structures </h1>
<h2>Number guessing game</h2>
<div class="code">
<pre>

  <span class="comment">// Flag-controlled while loop</span>

  <span class="preproc">#include</span> <span class="str">&#060iostream></span>
  <span class="preproc">#include</span> <span class="str">&#060cstdlib></span>
  <span class="preproc">#include</span> <span class="str">&#060ctime></span>

  <span class="preproc">int</span> <span class="func">main</span>()
  {
    <span class="preproc">int</span> num;
    <span class="preproc">int</span> guess;
    <span class="preproc">bool</span> done;

    num = (<span class="func">rand</span>() + <span class="func">time</span>(<span class="num">0</span>)) % <span class="num">100</span>;
    done = <span class="num">false</span>;
    <span class="preproc">while</span>(!done)
    {
      std::cout << <span class="str">"Enter an integer >= 0 < 100: "</span>;
      std::cin >> guess;
      <span class="preproc">if</span> (guess == num)
      {
        std::cout << <span class="str">"You guessed the correct number!"</span> << std::endl;
        done = <span class="num">true</span>;
      }
      <span class="preproc">else</span>
      {
        <span class="preproc">if</span> (guess < num)
        {
          std::cout << <span class="str">"Your guess is too low"</span> << std::endl;
        }
        <span class="preproc">else</span>
        {
          std::cout << <span class="str">"Your guess is too high"</span> << std::endl;
        }
      }
    }
    <span class="preproc">return</span> <span class="num">0</span>;
  }
</pre>
</div>


<h2>Fibonacci Number</h2>
<div class="code">
<pre>
  <span class="comment">// nth Fibonacci Number</span>

  <span class="preproc">#include</span> <span class="str">&#060iostream></span>

  <span class="preproc">using namespace</span> <span class="num">std</span>;

  <span class="preproc">int</span> main()
  {
    <span class="preproc">int</span> previous1;
    <span class="preproc">int</span> previous2;
    <span class="preproc">int</span> current;
    <span class="preproc">int</span> counter;
    <span class="preproc">int</span> nthFibonacci;

    std::cout << <span class="str">"Enter the first two fibonacci numbers: "</span>;
    std::cin >> previous1 >> previous2;
    std::cout << <span class="str">"Enter the position of the sequence: "</span>;
    <span class="preproc">if</span> (nthFibonnaci == <span class="num">1</span>)
    {
      current = previous1;
    }
    <span class="preproc">else if</span> (nthFibonacci == <span class="num">2</span>)
    {
      current = previous2;
    }
    <span class="preproc">else</span>
    {
      counter = <span class="num">3</span>;
      <span class="preproc">while</span> (counter <= nthFibonacci)
      {
        current = previous2 + previous1;
        previous1 = previous2;
        previous2 = current;
        counter++;
      }
    }
    std::cout << <span class="str">"The Fibonacci number at position "</span>;
    std::cout << nthFibonacci << <span class="str">" is: "</span> << current << std::endl;

    <span class="preproc">return</span> <span class="num">0</span>;
  }
</pre>
</div>

<div id="functions">
</div>

<h1>Functions</h1>
<h2>Largest Number</h2>
<div class="code">
<pre>
  <span class="preproc">#include</span> <span class="str">&#060iostream></span>

  <span class="preproc">double</span> <span class="func">larger</span>(<span class="preproc">double</span> x, <span class="preproc">double</span> y); <span class="comment">// Function Prototype</span>

  <span class="preproc">int</span> main()
  {
    <span class="preproc">double</span> num, max;
    <span class="preproc">int</span> count;

    std::cout << <span class="str">"Enter 10 numbers: "</span>;
    std::cin >> num;
    max = num;

    <span class="preproc">for</span> (count = 1; count < <span class="num">10</span>; count++)
    {
      std::cin >> num;
      max = <span class="func">larger</span>(max, num); <span class="comment">// Call to function</span>
    }

    std::cout << <span class="str">"The largest number is: "</span> << max << std::endl;

    <span class="preproc">return</span> <span class="num">0</span>;
  }

  <span class="preproc">double</span> <span class="func">larger</span>(<span class="preproc">double</span> x, <span class="preproc">double</span> y) <span class="comment">// Function definition</span>
  {
    <span class="preproc">if</span> (x >=y)
      <span class="preproc">return</span> x;
    <span class="preproc">else</span>
      <span class="preproc">return</span> y;
  }
</pre>
</div>
<br>

<h2>Palindrome Number</h2>
<p>
  Write a function that returns true if a number is a palindrome.  A number is a palindrome if it reads forwards and backwards in the same way.  For example, 5, 44, 434, 18881, 789545987 are all palindromes.
</p>
<div class="code">
<pre>
  <span class="preproc">#include</span> <span class="str">&#060iostream></span>
  <span class="preproc">#include</span> <span class="str">&#060cmath></span>

  <span class="preproc">bool</span> <span class="func">isNumPalindrome</span>(<span class="preproc">int</span> num); <span class="comment">// Function Prototype</span>

  <span class="preproc">int</span> main()
  {
    <span class="preproc">int</span> num;
    <span class="preproc">bool</span> isNumPalindrome;

    std::cout << <span class="str">"Enter a number: "</span>;
    std::cin >> num;

    isNumPalindrome = <span class="func">larger</span>(max, num); <span class="comment">// Call to function</span>

    <span class="preproc">if</span> (isNumPalindrome == <span class="preproc">true</span>)
    std::cout << <span class="str">"The number is a palindrome"</span> << std::endl;

    <span class="preproc">return</span> <span class="num">0</span>;
  }

  <span class="preproc">bool</span> <span class="func">isNumPalindrome</span>(<span class="preproc">int</span> num) <span class="comment">// Function definition</span>
  {
    <span class="preproc">int</span> pwr = <span class="num">0</span>;

    <span class="preproc">if</span> (num < <span class="num">10</span>)
      <span class="preproc">return true</span>;
    <span class="preproc">else</span>
      <span class="preproc">while</span> (num / static_cast&#060<span class="preproc">int</span>>(<span class="func">pow</span>(<span class="num">10</span>, pwr)) >= <span class="num">10</span>)
      {

      }
  }
</pre>
</div>
