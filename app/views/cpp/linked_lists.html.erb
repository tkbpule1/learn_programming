<%= provide(:title, 'Linked Lists') %>

<div class="links">
  <%= link_to 'C++ Home', cpp_path %>
</div>
<div class="links">
  <%= link_to 'Basics', cpp_basics_path %>
</div>
<div class="links">
  <%= link_to 'Examples', cpp_examples_path %>
</div>
<div class="links">
  <%= link_to 'Input/Output', cpp_iostream_path %>
</div>
<div class="links">
  <%= link_to 'Control Structures', cpp_control_structures_path %>
</div>
<div class="links">
  <%= link_to 'Functions', cpp_functions_path %>
</div>
<div class="links">
  <%= link_to 'Inheritance', cpp_inheritance_path %>
</div>
<div class="links">
  <%= link_to 'Linked Lists', cpp_linked_lists_path %>
</div>

<h1>Linked Lists</h1>

<p>
  A linked list is a collection of components, called <b>nodes</b>.  Each node contains two components: one to store data and one to store the address of the next node, called a <b>link</b>.  The address of the first node is stored in a separate location, called the <b>head</b> or <b>first</b>.  The last node's link is NULL.
</p>
<p><b>Linked List: </b>A list of items, called <b>nodes</b>, in whici the order
   of the nodes is determined by the address, called the <b>link</b>, stored in
   each node.
</p>

<p>
  We must declare each node as a <span class="preproc">class</span> or <span class="preproc">struct</span> because each node has two components.  The data type depends on the application, however, the link component is a pointer.  The type of the this pointer is the node type itself.  
</p>
