<%= provide(:title, 'C++ | Input/Output') %>

<%= render 'header' %>



<h1>I/O Streams and Standard I/O Devices</h1>

<p>
  <strong>Input Stream:</strong> A sequence of characters from an input device to the computer.
  <br>
  <strong>Output Stream:</strong> A sequence of characters from the computer to an output device.
  <br>
  <br>

  Variables of type istream (input stream) are called <strong>input stream variables</strong>;
  <br>
  Variables of type ostream (output stream) are called <strong>output stream variables</strong>;
  <br>
  <br>

  <strong>cin</strong> is used along with the <strong>stream extraction operator</strong>, <code>>></code>.
  <br>
  <strong>cout</strong> is used along with the <strong>stream insertion operator</strong>, <code><<</code>.
</p>

<h1>Input Stream Variable, cin</h1>
<p>
  There are a few predefined functions that can be used with the input stream variable.  Let's take a look at them.
</p>

<h2><strong>cin</strong> and the <span class="func">get</span> Function</h2>
<p>
  This function is mainly used with c-strings but there are different forms.
</p>
<br>

<p>
  This stores the next character.  It stores all printable characters, whitespace, new-line, etc. varChar is a char type variable.
</p>
<div class="code">
<pre>
  std::cin.<span class="func">get</span>(ch);
</pre>
</div>
<br><br>

<h3>Use with C-Strings</h3>
<p>
  This stores the next <code><span class="num">n</span> - <span class="num">1</span></code> number of characters; or all characters until the new line character.
</p>
<div class="code">
<pre>
  std::cin.<span class="func">get</span>(str, <span class="num">n</span>);
</pre>
</div>
<br><br>

<h2><strong>cin</strong> and the <span class="func">ignore</span> Function</h2>
<p>
  You can use the stream function <span class="func">ignore</span> to discard a portion of the input.
</p>
<div class="code">
<pre>
  std::cin.<span class="func">ignore</span>(intExp, chExp);
</pre>
</div>

<p>
  where <code>intExp</code> is an integer expression yielding an integer value; <code>chExp</code> is a char expression yielding a char value;
  <br>
</p>
<br><br>

<h2><strong>cin</strong> and the <span class="func">putback</span> Function</h2>
<p>
  This function allows you to put a character back into the input stream.
</p>
<div class="code">
<pre>
  std::cin.<span class="func">putback</span>(ch);
</pre>
</div>
<br><br>

<h2><strong>cin</strong> and the <span class="func">peek</span> Function</h2>
<p>
  This function allows you to store the next character, but it is not removed input stream.
</p>
<div class="code">
<pre>
  ch = std::cin.<span class="func">peek</span>();
</pre>
</div>
<br><br>

<h2><strong>cin</strong> and the <span class="func">clear</span> Function</h2>
<p>
  This function allows you to restore the input stream to a working state after it enters a fail state.
</p>
<div class="code">
<pre>
  std::cin.<span class="func">clear</span>();
</pre>
</div>
<br><br><br>

<h1>Output Stream Variable, cout</h1>
<p>
  There are several manipulators that can be used with cout to format the output.
</p>

<h2><strong>cout</strong> and the <span class="func">setprecision</span> Manipulator</h2>
<p>
  This manipulator allows you to control the output of floating-point numbers.
</p>
<div class="code">
<pre>
  std::cout << <span class="func">setprecision</span>(<span class="num">2</span>);
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">fixed</span> Manipulator</h2>
<p>
  This manipulator displays all floating-point numbers in the fixed decimal format
</p>
<div class="code">
<pre>
  std::cout << fixed;
</pre>
</div>

<p>
  To disable this manipulator:
</p>
<div class="code">
<pre>
  std::cout.<span class="func">unsetf</span>(ios::fixed);
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">scientific</span> Manipulator</h2>
<p>
  This manipulator displays all floating-point numbers in the fixed decimal format
</p>
<div class="code">
<pre>
  std::cout << scientific;
</pre>
</div>
<p>
  To disable this manipulator:
</p>
<div class="code">
<pre>
  std::cout.<span class="func">unsetf</span>(ios::scientific);
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">showpoint</span> Manipulator</h2>
<p>
  This manipulator displays all floating-point numbers in the fixed decimal format
</p>
<div class="code">
<pre>
  std::cout << showpoint;
</pre>
</div>
<p>
  To disable this manipulator:
</p>
<div class="code">
<pre>
  std::cout.<span class="func">unsetf</span>(ios::showpoint);
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">setw</span> Manipulator</h2>
<p>
  This manipulator is used to format the output; the argument is the number of columns the value will consume.  <span class="func">setw</span> only controls the output of the next expression.  The output is right-justified.
</p>
<div class="code">
<pre>
  std::cout << <span class="func">setw</span>(<span class="num">2</span>) << a << std::endl;
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">setfill</span> Manipulator</h2>
<p>
  This manipulator is used to fill the unused columns with a character other than a space.
</p>
<div class="code">
<pre>
  std::cout << <span class="func">setfill</span>(<span class="str">'*'</span>) << a << std::endl;
</pre>
</div>
<br><br>

<h2><strong>cout</strong> and the <span class="func">left</span> and <span class="func">right</span> Manipulator</h2>
<p>
  These manipulator are used to change whether the output is left/right-justified.
</p>

<h3>
  Left-justified
</h3>
<div class="code">
<pre>
  std::cout << <span class="func">left</span>;
</pre>
</div>

<h3>
  You can disable the left justification like this:
</h3>
<div class="code">
<pre>
  std::cout.<span class="func">unsetf</span>(ios::left);
</pre>
</div>

<h3>
  Right-justified
</h3>
<div class="code">
  std::cout << <span class="func">right</span>;
</div>
<br><br>

<h1>File Input/Output</h1>
<p>
  You can input data from a file and save output to a file. <br>
  This is a five step process:
  <ol>
    <li>Include the header file <strong>fstream</strong></li>
    <li>Declare file stream variables</li>
    <li>Associate the file stream variables with the input/output sources</li>
    <li>Use the file stream variables with >>, <<, or other input/output functions</li>
    <li>Close the files</li>
  </ol>
</p>
<br>

<h3>Step 2: Declare file stream variables</h3>
<p>
  To declare file stream variables, use ifstream and ofstream.  The variables can be named anything you like.<br>
  <code>ifstream var;</code><br>
  <code>ofstream var;</code>
</p>
<div class="code">
<pre>
  ifstream inFile;
</pre>
</div>
<div class="code">
<pre>
  ofstream outFile;
</pre>
</div>
<br>

<h3>Step 3: Associate the file stream variable with the input/output sources</h3>
<p>
  This is basically opening the files so they can be used.<br>
  <code>fileStreamVariable.open(sourceName)</code>
</p>
<p>
  Assuming the file is on the desktop and named data.txt:
</p>
<div class="code">
<pre>
  inFile.<span class="func">open</span>(<span class"func">"/home/ubuntu/Desktop/data.txt"</span>)
</pre>
</div>
<p>
  From this, you can see that you need to use the complete path to the file.
</p>
<p>
  The ofstream variable works in a similar way, but if the file does not exist, it will be created.
</p>
<div class="code">
<pre>
  outFile.<span class="func">open</span>(<span class"func">"/home/ubuntu/Desktop/dataOut.txt"</span>)
</pre>
</div>
<br>

<h3>Step 4: Use the file stream variables, just like you would with cin and cout</h3>
<div class="code">
<pre>
  <span class="func">getline</span>(inFile, str);
</pre>
</div>
<br>

<h3>Step 5: Close the file(s)</h3>
<div class="code">
<pre>
  inFile.close();
</pre>
</div>
<div class="code">
<pre>
  outFile.close();
</pre>
</div>
